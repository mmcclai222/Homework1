import java.util.HashMap;
import java.util.Map;

class HeapNode {
    private int data;
    private int priority;

    public HeapNode(int data, int priority) {
        this.data = data;
        this.priority = priority;
    }

    public int getData() {
        return data;
    }

    public int getPriority() {
        return priority;
    }
}

public class MinBinaryHeap {
    private HeapNode[] heap;
    private int size;
    private int capacity;
    private Map<Integer, Integer> position;

    public MinBinaryHeap(int capacity) {
        this.capacity = capacity;
        this.size = 0;
        heap = new HeapNode[capacity];
        position = new HashMap<>();
    }

    private int parent(int pos) {
        return (pos - 1) / 2;
    }

    private int leftChild(int pos) {
        return (2 * pos) + 1;
    }

    private int rightChild(int pos) {
        return (2 * pos) + 2;
    }

    private void swap(int pos1, int pos2) {
        HeapNode temp = heap[pos1];
        heap[pos1] = heap[pos2];
        heap[pos2] = temp;
        position.put(heap[pos1].getData(), pos1);
        position.put(heap[pos2].getData(), pos2);
    }

    private void heapifyUp(int pos) {
        int current = pos;
        while (current > 0 && heap[current].getPriority() < heap[parent(current)].getPriority()) {
            swap(current, parent(current));
            current = parent(current);
        }
    }

    private void heapifyDown(int pos) {
        int smallest = pos;
        int left = leftChild(pos);
        int right = rightChild(pos);

        if (left < size && heap[left].getPriority() < heap[smallest].getPriority()) {
            smallest = left;
        }

        if (right < size && heap[right].getPriority() < heap[smallest].getPriority()) {
            smallest = right;
        }

        if (smallest != pos) {
            swap(pos, smallest);
            heapifyDown(smallest);
        }
    }

    public void startHeap(int N) {
        capacity = N;
        heap = new HeapNode[capacity];
        size = 0;
        position.clear();
    }

    public void insert(int item, int value) {
        if (size >= capacity) {
            System.out.println("Heap is full. Cannot insert more elements.");
            return;
        }

        HeapNode node = new HeapNode(item, value);
        heap[size] = node;
        position.put(item, size);
        size++;
        heapifyUp(size - 1);
    }

    public int findMin() {
        if (size == 0) {
            throw new IllegalStateException("Heap is empty.");
        }
        return heap[0].getData();
    }

    public void delete(int index) {
        if (index < 0 || index >= size) {
            throw new IllegalArgumentException("Index out of bounds.");
        }

        int data = heap[index].getData();
        heap[index] = heap[size - 1];
        position.put(heap[index].getData(), index);
        size--;
        heapifyDown(index);
        position.remove(data);
    }

    public void extractMin() {
        if (size == 0) {
            throw new IllegalStateException("Heap is empty.");
        }
        delete(0);
    }

    public void delete(int item) {
        if (!position.containsKey(item)) {
            throw new IllegalArgumentException("Item not found in the heap.");
        }
        delete(position.get(item));
    }

    public void changePriority(int item, int newPriority) {
        if (!position.containsKey(item)) {
            throw new IllegalArgumentException("Item not found in the heap.");
        }
        int index = position.get(item);
        int oldPriority = heap[index].getPriority();
        heap[index] = new HeapNode(item, newPriority);
        if (newPriority < oldPriority) {
            heapifyUp(index);
        } else {
            heapifyDown(index);
        }
    }

    public void printHeap() {
        for (int i = 0; i < size; i++) {
            System.out.print("(" + heap[i].getData() + ", " + heap[i].getPriority() + ") ");
        }
        System.out.println();
    }

    public static void main(String[] args) {
        MinBinaryHeap minHeap = new MinBinaryHeap(10);
        minHeap.insert(4, 4);
        minHeap.insert(7, 7);
        minHeap.insert(2, 2);
        minHeap.insert(5, 5);
        minHeap.insert(1, 1);

        System.out.println("Heap after insertion:");
        minHeap.printHeap();

        minHeap.delete(5); // delete by item
        System.out.println("Heap after deleting item (5, 5):");
        minHeap.printHeap();

        minHeap.changePriority(2, 1);
        System.out.println("Heap after changing priority of item (2, 2) to 1:");
        minHeap.printHeap();
    }
}
